## YAML 配置文件

# log 模块：日志配置
log:
  disabled: false # 禁用日志输出
  file: /tmp/cdns.log # 日志文件路径
  debug: false # 是否开启 Debug 日志输出
  disable_timestamp: false # 是否禁用时间输出

# api 模块：API 配置
api:
  listen: 0.0.0.0:1092 # API 监听地址，留空不启用
  debug: false # 开启 Golang Debug Pprof 路径 /debug/pprof/*
  secret: '' # 开启请求鉴权（不会在 /debug 下鉴权），请在请求中附加 Header: Authorization: Bearer <secret>
## API 配置支持为 match-plugin/exec-plugin 挂载 API，提供更多功能
# Match-Plugin API 路径：/plugin/match/{:match-plugin-tag}/*
# Exec-Plugin API 路径：/plugin/exec/{:exec-plugin-tag}/*

# upstream 模块：上游DNS服务器配置
# 支持多种类型：UDP、TCP、TLS、HTTPS(HTTP/3)、QUIC
upstream:
  - tag: Google-UDP-DNS
    type: udp
    udp: # UDP 上游服务器配置
      address: 8.8.8.8:53 # 上游服务器地址，必填，格式：IP | IP:Port
      idle_timeout: 10s # 连接空闲超时时间，格式：Golang time.Duration 格式
      query_timeout: 800ms # 查询超时时间，格式：Golang time.Duration 格式
    dialer: # 拨号器配置
      timeout: 10s # 连接超时时间，格式：Golang time.Duration 格式
      so_mark: 0 # SO_MARK，仅支持 Linux
      bind_interface: eth0 # 绑定网卡，仅支持 Linux/Darwin/Windows
      bind_ip: 192.168.1.1 # 绑定 IP，仅支持 Linux/Darwin/Windows

  - tag: Google-TCP-DNS
    type: tcp
    tcp: # UDP 上游服务器配置
      address: 8.8.8.8:53 # 上游服务器地址，必填，格式：IP | IP:Port
      idle_timeout: 10s # 连接空闲超时时间，格式：Golang time.Duration 格式
      query_timeout: 800ms # 查询超时时间，格式：Golang time.Duration 格式
    dialer: # 拨号器配置
      timeout: 10s # 连接超时时间，格式：Golang time.Duration 格式
      so_mark: 0 # SO_MARK，仅支持 Linux
      bind_interface: eth0 # 绑定网卡，仅支持 Linux/Darwin/Windows
      bind_ip: 192.168.1.1 # 绑定 IP，仅支持 Linux/Darwin/Windows
      # Socks5 代理只支持 TCP/TLS/HTTPS(不支持HTTP/3) 类型
      socks5_address: 127.0.0.1:2080 # Socks5 代理地址，格式：IP:Port，端口不可省略！！！
      socks5_username: username # Socks5 代理用户名，可为空
      socks5_password: password # Socks5 代理密码，可为空

  - tag: Google-TLS-DNS
    type: tls
    tls: # TLS 上游服务器配置
      address: 8.8.8.8:853 # 上游服务器地址，必填，格式：IP | IP:Port
      server_name: dns.google # TLS SNI
      insecure_skip_verify: false # 是否跳过证书校验
      idle_timeout: 10s # 连接空闲超时时间，格式：Golang time.Duration 格式
      query_timeout: 800ms # 查询超时时间，格式：Golang time.Duration 格式
      # 以下为不常用设置，可以忽略
      ca_file: /etc/cdns/server_ca.pem # CA 证书文件路径，用于校验服务器证书
      client_cert_file: /etc/cdns/client_cert.pem # 客户端证书文件路径，用于客户端认证
      client_key_file: /etc/cdns/client_key.pem # 客户端私钥文件路径，用于客户端认证
    dialer: # 拨号器配置
      timeout: 10s # 连接超时时间，格式：Golang time.Duration 格式
      so_mark: 0 # SO_MARK，仅支持 Linux
      bind_interface: eth0 # 绑定网卡，仅支持 Linux/Darwin/Windows
      bind_ip: 192.168.1.1 # 绑定 IP，仅支持 Linux/Darwin/Windows
      # Socks5 代理只支持 TCP/TLS/HTTPS(不支持HTTP/3) 类型
      socks5_address: 127.0.0.1:2080 # Socks5 代理地址，格式：IP:Port，端口不可省略！！！
      socks5_username: username # Socks5 代理用户名，可为空
      socks5_password: password # Socks5 代理密码，可为空

  - tag: Cloudflare-HTTPS-DNS
    type: https
    https: # HTTPS 上游服务器配置
      address: 1.1.1.1:443 # 上游服务器地址，必填，格式：IP | IP:Port
      url: https://dns.cloudflare-dns.com/dns-query # HTTPS URL
      header: # HTTP Header
        Host: dns.cloudflare-dns.com
        User-Agent: cdns/v0.0.1-alpha
      use_h3: false # 使用 HTTP/3
      server_name: dns.cloudflare-dns.com # TLS SNI
      insecure_skip_verify: false # 是否跳过证书校验
      idle_timeout: 10s # 连接空闲超时时间，格式：Golang time.Duration 格式
      query_timeout: 800ms # 查询超时时间，格式：Golang time.Duration 格式
      # 以下为不常用设置，可以忽略
      ca_file: /etc/cdns/server_ca.pem # CA 证书文件路径，用于校验服务器证书
      client_cert_file: /etc/cdns/client_cert.pem # 客户端证书文件路径，用于客户端认证
      client_key_file: /etc/cdns/client_key.pem # 客户端私钥文件路径，用于客户端认证
    dialer: # 拨号器配置
      timeout: 10s # 连接超时时间，格式：Golang time.Duration 格式
      so_mark: 0 # SO_MARK，仅支持 Linux
      bind_interface: eth0 # 绑定网卡，仅支持 Linux/Darwin/Windows
      bind_ip: 192.168.1.1 # 绑定 IP，仅支持 Linux/Darwin/Windows
      # Socks5 代理只支持 TCP/TLS/HTTPS(不支持HTTP/3) 类型
      socks5_address: 127.0.0.1:2080 # Socks5 代理地址，格式：IP:Port，端口不可省略！！！
      socks5_username: username # Socks5 代理用户名，可为空
      socks5_password: password # Socks5 代理密码，可为空

  - tag: AdGuard-QUIC-DNS
    type: quic
    quic: # QUIC 上游服务器配置
      address: 94.140.14.14:784 # 上游服务器地址，必填，格式：IP | IP:Port
      server_name: dns.adguard-dns.com # TLS SNI
      insecure_skip_verify: false # 是否跳过证书校验
      idle_timeout: 10s # 连接空闲超时时间，格式：Golang time.Duration 格式
      query_timeout: 800ms # 查询超时时间，格式：Golang time.Duration 格式
      # 以下为不常用设置，可以忽略
      ca_file: /etc/cdns/server_ca.pem # CA 证书文件路径，用于校验服务器证书
      client_cert_file: /etc/cdns/client_cert.pem # 客户端证书文件路径，用于客户端认证
      client_key_file: /etc/cdns/client_key.pem # 客户端私钥文件路径，用于客户端认证
    dialer: # 拨号器配置
      timeout: 10s # 连接超时时间，格式：Golang time.Duration 格式
      so_mark: 0 # SO_MARK，仅支持 Linux
      bind_interface: eth0 # 绑定网卡，仅支持 Linux/Darwin/Windows
      bind_ip: 192.168.1.1 # 绑定 IP，仅支持 Linux/Darwin/Windows

  # 并发查询，取最快返回的结果（并非最快的请求IP）
  - tag: Multi-DNS
    type: multi
    multi:
      upstreams:
        - tag: Google-TLS-DNS
        - tag: Cloudflare-HTTPS-DNS
        - tag: AdGuard-QUIC-DNS

  # 随机选取上游服务器查询
  - tag: Random-DNS
    type: random
    random:
      upstreams:
        - tag: Google-TLS-DNS
        - tag: Cloudflare-HTTPS-DNS
        - tag: AdGuard-QUIC-DNS

  # 根据请求测试选取上游服务器查询
  - tag: QueryTest-DNS
    type: querytest
    querytest:
      upstreams:
        - tag: Google-TLS-DNS
        - tag: Cloudflare-HTTPS-DNS
        - tag: AdGuard-QUIC-DNS
      test_interval: 10s # 测试间隔时间，格式：Golang time.Duration 格式
      test_domain: www.example.com # 测试域名
      fallback: false # 是否开启回退模式，开启后，当所有上游服务器都不可用时，会使用第一个上游服务器进行查询

# match-plugin 模块：匹配插件
# 用户可以自定义编写自己的匹配插件，只需实现 adapter.MatchPlugin 接口，并注册，然后在 matchPlugin/plugin.go 中匿名引入即可
match_plugins:
  # 域名匹配插件
  - tag: domain
    type: domain
    args:
      full: # 完整匹配
        - example.com
        - www.example.com
      suffix: # 后缀匹配
        - example.com
        - example.net
        - example.org
      keyword: # 关键字匹配
        - example
        - example.com
        - example.net
        - example.org
      regex: # Golang 正则匹配，由于正则的匹配性能一般，可能会拉低查询性能，规则中应减少甚至避免使用
        - ^example\.com$
        - ^www\.example\.com$
      file: # 导入外部文件
        - /etc/cdns/domain-01.txt
        - /etc/cdns/domain-02.txt
        ## 文件格式 ##
        # 1. 必须以 (full:|suffix:|keyword:|regex:) 开头
        # 2. 可以在新行使用注释，`#`开头
        # 3. 每行一个匹配规则，不可在规则后加入注释
        #############
        # 支持调用 API 刷新规则，详见 api 模块，请求：GET /reload，会自动重载所有规则文件

  # IP 匹配插件
  - tag: ip
    type: ip
    args:
      ip: # IP 匹配
        - 192.168.1.1
        - 100.64.0.1
      cidr: # CIDR 匹配
        - 100.64.0.0/10
        - 172.16.0.0/12
      file: # 导入外部文件
        - /etc/cdns/ip-01.txt
        - /etc/cdns/ip-02.txt
        ## 文件格式 ##
        # 1. 每行必须是一个 IP 或 CIDR
        # 2. 可以在新行使用注释，`#`开头
        # 3. 每行一个匹配规则，不可在规则后加入注释
        #############
        #############
        # 支持调用 API 刷新规则，详见 api 模块，请求：GET /reload，会自动重载所有规则文件

  # sing-box geosite资源文件
  - tag: geosite
    type: sing-geosite
    args:
      file: /etc/cdns/geosite.db # geosite资源文件路径
      code: # 选择性导入 geosite 资源文件中的规则，可以有效减少内存占用，提高匹配性能
        - cn
        - gfw
        - google-cn
        - apple-cn
      #############
      # 支持调用 API 刷新规则，详见 api 模块，请求：GET /reload，会自动重载规则文件

  # sing-box geoip资源文件
  - tag: geoip
    type: sing-geoip
    args:
      file: /etc/cdns/geoip.db # geoip资源文件路径
      #############
      # 支持调用 API 刷新规则，详见 api 模块，请求：GET /reload，会自动重载规则文件


# exec-plugin 模块：执行插件
exec_plugins:
  # 缓存插件，提供缓存功能，可以有效减少上游服务器的请求次数，提高查询性能
  - tag: cache
    type: cache
    args:
    #############
    # 支持调用 API 刷新规则，详见 api 模块，请求：GET /clean，会清除缓存（但不会清除缓存文件中的缓存），请求：GET /save，会将内存中的缓存保存到缓存文件中

  # 缓存插件，使用 Redis 作为缓存后端，由 Redis 提供缓存功能，可以有效减少上游服务器的请求次数，提高查询性能，其他用法与 cache 插件相同
  - tag: redis-cache
    type: redis-cache
    args:
      address: 127.0.0.1:6379 # Redis 地址
      database: 6 # Redis 数据库（默认为空）
      password: # Redis 密码（若有）
    #############
    # 支持调用 API 刷新规则，详见 api 模块，请求：GET /clean，会清除缓存（但不会清除缓存文件中的缓存），请求：GET /save，会将内存中的缓存保存到缓存文件中

  # prefer 插件，可以根据规则丢弃A/AAAA请求
  - tag: prefer
    type: prefer

  # workflow-go 插件，可以并发处理 workflow 规则，并返回最快结束的结果
  - tag: workflow-go
    type: workflow-go

  # hosts 插件，提供 hosts 功能，可以将指定域名解析到指定 IP
  - tag: hosts
    type: hosts
    args:
      rule: # 语法：匹配规则 IP1 IP2 IP3 ...，数据类型：数组，每一项一种匹配规则，只支持 full/suffix
        - 'full:example.com 1.1.1.1 2001::1'
        - 'suffix:example.com 1.1.1.1 2001::1'
      file:
        - /etc/cdns/hosts-01.txt
        - /etc/cdns/hosts-02.txt

  # 为请求附加 ECS
  - tag: ecs
    type: ecs
    args:
      ip4: 100.64.0.1 # IPv4 地址
      ip6: 2001::1 # IPv6 地址
      mask4: 32 # 默认 32，隐私考虑可使用更大的子网地址
      mask6: 128 # 默认 128，隐私考虑可使用更大的子网地址

  # ipset 模块
  - tag: ipset
    type: ipset
    args:
      name4: set4 # IPSet 集合名称
      mask4: 32 # 默认 32，使用更大的子网
      ttl4: 10s # 自定义 TTL，不使用 DNS 返回的默认 TTL
      name6: set6 # IPSet 集合名称
      mask6: 128 # 默认 128，使用更大的子网
      ttl6: 10s # 自定义 TTL，不使用 DNS 返回的默认 TTL

  # nftset 模块
  - tag: nftset
    type: nftset
    args:
      table_name4: table4 # NftSet table 名称
      set_name4: set4 # NftSet set 名称
      mask4: 32 # 默认 32，使用更大的子网
      ttl4: 10s # 自定义 TTL，不使用 DNS 返回的默认 TTL
      table_name6: table4 # NftSet table 名称
      set_name6: set4 # NftSet set 名称
      mask6: 128 # 默认 128，使用更大的子网
      ttl6: 10s # 自定义 TTL，不使用 DNS 返回的默认 TTL

# workflow 模块：工作流
workflows:
  - tag: main
    rules:
      # 用户可以自定义工作流程，对 DNS 请求进行精细化处理
      # 工作量支持三种匹配类型 match_or/match_and/exec

      - match_and: # 匹配规则，所有规则匹配成功才会执行 exec 规则，若存在 else_exec，则匹配不成功时执行 else_exec，数据类型：数组，每一项一种匹配规则
          - listener: # 匹配监听器 tag
              - listener-1
              - listener-2
          - client_ip: # 匹配请求的客户端 IP
              - 192.168.0.2
              - 192.168.1.0/24
          - qtype: # 匹配请求类型(QType)
              - A
              - 28
          - qname: # 匹配请求的QName
              - www.google.com.
              - www.example.com.
          - has_resp_msg: true # 匹配是否有响应消息
          - has_resp_msg: false # 匹配是否没有响应消息
          - resp_ip: # 如果有响应消息，匹配响应消息中的IP，仅支持 A/AAAA
              - 100.64.0.1
              - 192.168.0.0/24
            invert: true # 是否对规则取反，注意放置的位置，只能放置在每一项匹配规则里
          - mark: 0 # 匹配标记，格式：正整数
          - plugin: # 使用 match-plugin 匹配
              tag: domain # 匹配插件 tag
              args: # 传递的参数
                Foo: Bar
          - match_and: # 嵌套匹配规则，所有规则匹配成功才会执行 exec 规则，数据类型：数组，每一项一种匹配规则
          - match_or: # 嵌套匹配规则，只要有一项规则匹配成功就会执行 exec 规则，数据类型：数组，每一项一种匹配规则
        else_exec: # 若存在 else_exec，则匹配不成功时执行 else_exec
          # do something...
        exec:
          - mark: 1 # 设置标记，格式：正整数
          - upstream: DNS # 转发请求到 upstream，数据类型：字符串，值为 upstream tag
          - plugin: # 使用 exec-plugin 执行
              tag: cache # 执行插件 tag
              args: # 传递的参数
                Foo: Bar
          - jump_to: # 跳转到指定的工作流程，数据类型：字符串，值为 workflow tag
              - w1
              - w2
          - go_to: # 跳转到指定的工作流程，数据类型：字符串，值为 workflow tag
              - w1
              - w2
          - clean: true # 清除返回的 DNS 响应数据，数据类型：布尔值，true 为清除，false 为不清除
          ### jump_to 和 go_to 的区别 ###
          # jump_to：跳转到指定的工作流程，执行完后返回当前工作流程继续执行，除非触发(return)直接结束整个流程
          # go_to：跳转到指定的工作流程，执行完后不会返回当前工作流程，而是直接结束
          - return: true # 触发 return，直接结束整个工作流程，数据类型：任意，只要有值就会触发

      # match-plugin 详解
      - match_or:
          - plugin: # 使用 match-plugin domain
              tag: domain # 匹配插件 tag
              args: # 传递的参数
          - plugin: # 使用 match-plugin ip
              tag: ip # 匹配插件 tag
              args: # 传递的参数
          - plugin: # 使用 match-plugin geosite，匹配请求的域名，只支持 A/AAAA 请求
              tag: geosite # 匹配插件 tag
              args: # 传递的参数
                code: # 设置匹配的 code ，数据结构：数组|字符串，只会匹配 code 中设置的规则，注意：如果 plugin 中有设置 code，请确保这里的 code 是 plugin code 的子集
                  - cn
          - plugin: # 使用 match-plugin geoip，匹配返回的结果，只支持 A/AAAA
              tag: geoip
              args:
                code: # 设置匹配的 code，数据结构：数组|字符串
                  - cn
        else_exec: # 若存在 else_exec，则匹配不成功时执行 else_exec
          # do something...
        exec:

      # exec-plugin 详解
      - exec:
          - plugin: # 使用 exec-plugin cache
              tag: cache # 执行插件 tag
              args: # 传递的参数
               store: true # 将请求缓存
               return: true # 若成功缓存，触发return，直接结束整个工作流程

          - plugin: # 使用 exec-plugin cache
              tag: cache # 执行插件 tag
              args: # 传递的参数
                restore: true # 将缓存覆盖到结果
                return: true # 若成功，触发return，直接结束整个工作流程

          - plugin: # 使用 exec-plugin workflow-go
              tag: workflow-go # 执行插件 tag
              args:
                workflows: # 并发执行的工作流，取最快返回的工作流的结果
                  - w1
                  - w2
                wait_time: 100ms # 当 workflows 数为 2 时，配置生效，第二个 workflow 将被延迟 wait_time 执行

          - plugin: # 使用 exec-plugin host
              tag: host # 执行插件 tag

          - upstream: DNS # 转发请求到 upstream，数据类型：字符串，值为 upstream tag
          - plugin: # 使用 exec-plugin prefer，注意：必须确保有 upstream 执行过！！！
              tag: prefer # 执行插件 tag
              args: # 传递的参数
                prefer: 'A' # 若请求 AAAA 记录，插件会使用最后一个触发的 upstream 查询 A 记录，若存在，则丢弃 AAAA 结果，生成空结果
                # prefer: 'AAAA' # 若请求 A 记录，插件会使用最后一个触发的 upstream 查询 AAAA 记录，若存在，则丢弃 A 结果，生成空结果

          - plugin: # 使用 exec-plugin ecs，注意，需要在转发到 upstream 前使用
              tag: ecs
          - upstream: DNS

          - upstream: DNS
          - plugin: # 使用 exec-plugin ipset，注意，需要在转发到 upstream 后使用
              tag: ipset
          - plugin: # 使用 exec-plugin nftset，注意，需要在转发到 upstream 后使用
              tag: nftset

# listener 模块：监听器
listeners:
  - tag: local-tcp
    type: tcp # 监听器类型，目前支持 tcp/udp
    listen: :53 # 监听地址，格式：IP:Port | :Port
    workflow: main # 触发的工作流程，数据类型：字符串，值为 workflow tag

  - tag: local-udp
    type: udp # 监听器类型，目前支持 tcp/udp
    listen: :53 # 监听地址，格式：IP:Port | :Port
    workflow: main # 触发的工作流程，数据类型：字符串，值为 workflow tag

  - tag: tls
    type: tls
    listen: :853
    workflow: main
    tls:
      cert_file: /etc/cdns/server_cert.pem # 证书文件
      key_file: /etc/cdns/server_key.pem # 私钥文件
      client_ca_file: /etc/cdns/client_ca.pem # 客户端 CA 文件，用于强制验证客户端证书，可选，不填则不验证
